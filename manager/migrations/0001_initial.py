# Generated by Django 5.2.6 on 2025-09-08 00:42

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('name', models.CharField(max_length=100, verbose_name='Nome da Cidade')),
            ],
            options={
                'verbose_name': 'Cidade',
                'verbose_name_plural': 'Cidades',
                'db_table': 'city',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Nome do País')),
                ('code', models.CharField(max_length=3, unique=True, verbose_name='Código do País')),
            ],
            options={
                'verbose_name': 'País',
                'verbose_name_plural': 'Países',
                'db_table': 'country',
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('street', models.CharField(db_index=True, max_length=255, verbose_name='Rua')),
                ('neighborhood', models.CharField(db_index=True, max_length=255, verbose_name='Bairro')),
                ('number', models.CharField(db_index=True, default='S/N', help_text="Use 'S/N' se não houver número.", max_length=20, verbose_name='Número')),
                ('complement', models.CharField(blank=True, max_length=255, null=True, verbose_name='Complemento')),
                ('reference', models.CharField(blank=True, max_length=255, null=True, verbose_name='Referência')),
                ('latitude', models.FloatField(blank=True, null=True, verbose_name='Latitude')),
                ('longitude', models.FloatField(blank=True, null=True, verbose_name='Longitude')),
                ('zip_code', models.CharField(blank=True, db_index=True, help_text='Formato: 00000-000', max_length=20, null=True, verbose_name='CEP')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='addresses', to='manager.city', verbose_name='Cidade')),
            ],
            options={
                'verbose_name': 'Endereço',
                'verbose_name_plural': 'Endereços',
                'db_table': 'address',
            },
        ),
        migrations.CreateModel(
            name='Salon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('name', models.CharField(db_index=True, max_length=100, unique=True, verbose_name='Nome do Salão')),
                ('description', models.TextField(blank=True, verbose_name='Descrição')),
                ('email', models.EmailField(help_text='Email para contato e login.', max_length=254, unique=True, verbose_name='Email de Contato')),
                ('phone_number', models.CharField(blank=True, db_index=True, max_length=20, null=True, verbose_name='Telefone de Contato')),
                ('website', models.URLField(blank=True, null=True, verbose_name='Website')),
                ('slug', models.SlugField(help_text='URL amigável para o salão.', max_length=100, unique=True, verbose_name='Slug')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='salon_logos/', verbose_name='Logo do Salão')),
                ('is_active', models.BooleanField(default=True, verbose_name='Ativo')),
                ('operating_hours', models.JSONField(default=dict, verbose_name='Horário de Funcionamento')),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='salon_address', to='manager.address', verbose_name='Endereço do Salão')),
            ],
            options={
                'verbose_name': 'Salão',
                'verbose_name_plural': 'Salões',
                'db_table': 'salon',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('name', models.CharField(max_length=100, verbose_name='Nome do Serviço')),
                ('description', models.TextField(blank=True, verbose_name='Descrição do Serviço')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Preço')),
                ('duration_minutes', models.IntegerField(verbose_name='Duração em minutos')),
                ('salon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='manager.salon', verbose_name='Salão')),
            ],
            options={
                'verbose_name': 'Serviço',
                'verbose_name_plural': 'Serviços',
                'db_table': 'service',
                'ordering': ['name'],
                'unique_together': {('salon', 'name')},
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Nome do Estado')),
                ('abbreviation', models.CharField(max_length=2, unique=True, verbose_name='Abreviação')),
                ('region', models.CharField(max_length=100, verbose_name='Região')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='states', to='manager.country', verbose_name='País')),
            ],
            options={
                'verbose_name': 'Estado',
                'verbose_name_plural': 'Estados',
                'db_table': 'state',
            },
        ),
        migrations.AddField(
            model_name='city',
            name='state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cities', to='manager.state', verbose_name='Estado'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('user_type', models.CharField(choices=[('client', 'Cliente'), ('professional', 'Profissional'), ('salon_owner', 'Dono de Salão')], default='client', max_length=50)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Número de Telefone')),
                ('bio', models.TextField(blank=True, null=True, verbose_name='Biografia')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/', verbose_name='Foto de Perfil')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='gestao_user_groups', related_query_name='gestao_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='gestao_user_permissions', related_query_name='gestao_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='salon',
            name='owner',
            field=models.ForeignKey(help_text='Dono do salão.', on_delete=django.db.models.deletion.CASCADE, related_name='owned_salons', to='manager.user'),
        ),
        migrations.CreateModel(
            name='Professional',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('full_name', models.CharField(max_length=200, verbose_name='Nome Completo')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='professional_pics/', verbose_name='Foto do Profissional')),
                ('is_active', models.BooleanField(default=True, verbose_name='Ativo')),
                ('salon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='professionals', to='manager.salon', verbose_name='Salão')),
                ('specialties', models.ManyToManyField(related_name='professionals', to='manager.service', verbose_name='Especialidades')),
                ('user', models.OneToOneField(help_text='Informações de login do profissional.', on_delete=django.db.models.deletion.CASCADE, related_name='professional_info', to='manager.user')),
            ],
            options={
                'verbose_name': 'Profissional',
                'verbose_name_plural': 'Profissionais',
                'db_table': 'professional',
                'ordering': ['full_name'],
            },
        ),
        migrations.AlterUniqueTogether(
            name='city',
            unique_together={('name', 'state')},
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última Atualização')),
                ('date_time', models.DateTimeField(db_index=True, verbose_name='Data e Hora')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notas Adicionais')),
                ('status', models.CharField(choices=[('pending', 'Pendente'), ('confirmed', 'Confirmado'), ('completed', 'Concluído'), ('cancelled', 'Cancelado')], db_index=True, default='pending', max_length=50, verbose_name='Status')),
                ('professional', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='received_appointments', to='manager.professional', verbose_name='Profissional')),
                ('salon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='manager.salon', verbose_name='Salão')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_appointments', to='manager.service', verbose_name='Serviço Agendado')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='my_appointments', to='manager.user', verbose_name='Cliente')),
            ],
            options={
                'verbose_name': 'Agendamento',
                'verbose_name_plural': 'Agendamentos',
                'db_table': 'appointment',
                'ordering': ['date_time'],
                'unique_together': {('professional', 'date_time')},
            },
        ),
    ]
